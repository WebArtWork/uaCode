import { Injectable } from '@angular/core';

@Injectable({
	providedIn: 'root'
})
export class UacodeService {
	constructor() {}

	getExample(id: number): string {
		const command = this.commands.find((cmd) => cmd.id === id);

		return command ? command.example : ' ';
	}

	getQuestion(id: number): string {
		const command = this.commands.find((cmd) => cmd.id === id);

		return command ? command.question : ' ';
	}

	translate(code: string): string {
		// Об'єкт для збереження відповідностей між UA-командами та JS-командами
		const translations: Record<string, string> = {};

		// Заповнюємо translations на основі команд, які надає сервіс
		this.commands.forEach((cmd) => {
			translations[cmd.name] = cmd.execute;
		});

		// Визначаємо логічні оператори, які треба замінити окремо
		const logicalOperators: Record<string, string> = {
			ВІРНО: 'true', // логічне І
			НЕВІРНО: 'false', // логічне І
			' ТА ': ' && ', // логічне І
			' АБО ': ' || ' // логічне АБО
		};

		// Отримуємо введений український код та обрізаємо зайві пробіли
		let translatedCode = code.trim();

		// Заміна ключових слів з української на відповідні JS-команди
		for (const [uaCmd, jsCmd] of Object.entries(translations)) {
			translatedCode = translatedCode.split(uaCmd).join(jsCmd);
		}

		// Заміна логічних операторів (обов'язково з пробілами, щоб уникнути помилкових збігів)
		for (const [uaCmd, jsCmd] of Object.entries(logicalOperators)) {
			translatedCode = translatedCode.replace(uaCmd, jsCmd);
		}

		return translatedCode;
	}

	commands = [
		{
			id: 1,
			name: 'Друк',
			execute: 'print',
			example: "Друк('Світ');",
			question: "Друк('Україна');"
		},
		{
			id: 2,
			name: 'Змінна',
			execute: 'var',
			example: "Змінна назва = 'Ніка';\n\nДрук('Мене звати: ' + назва);",
			question: "Змінна назва = 'Іван';\n\nДрук('Мене звати: ' + назва);"
		},
		{
			id: 3,
			name: 'Константа',
			execute: 'const',
			example: "Константа рік = 2024;\n\nДрук('Цей рік: ' + рік);",
			question: "Константа рік = 2025;\n\nДрук('Цей рік: ' + рік);"
		},
		{
			id: 4,
			name: 'Якщо',
			execute: 'if',
			example: "Якщо (true) {\n  Друк('Це працює!');\n}",
			question: "Якщо (true) {\n  Друк('Це також працює!');\n}"
		},
		{
			id: 5,
			name: 'Інакше',
			execute: 'else',
			example:
				"Якщо (true ТА true) {\n  Друк('Обидві умови істинні');\n} Інакше {\n  Друк('Усі умови хибні');\n}",
			question:
				"Якщо (true ТА true) {\n  Друк('Обидві умови істинні');\n} Інакше {\n  Друк('Усі умови хибні');\n}"
		},
		{
			id: 6,
			name: 'Інакше якщо',
			execute: 'else if',
			example:
				"Якщо (true ТА true) {\n  Друк('Обидві умови істинні');\n} Інакше якщо (false АБО true) {\n  Друк('Одна з умов істинна');\n}",
			question:
				"Якщо (true ТА true) {\n  Друк('Обидві умови істинні');\n} Інакше якщо (false АБО true) {\n  Друк('Одна з умов істинна');\n}"
		},
		{
			id: 7,
			name: 'Поверни',
			execute: 'return',
			example:
				"Якщо (true) {\n  Поверни 'Готово';\n}\n\nДрук('Цей рядок не виконається');",
			question:
				"Якщо (false) {\n  Поверни 'Завершено';\n}\n\nДрук('Цей рядок виконається');"
		},
		{
			id: 8,
			name: 'Поки',
			execute: 'while',
			example:
				"Функція рахувати(лічильник) {\n  Поки (лічильник > 0) {\n    Друк('Лічильник: ' + лічильник);\n\n    лічильник--;\n  }\n}\n\nрахувати(5);",
			question:
				"Функція рахувати(лічильник) {\n  Поки (лічильник > 0) {\n    Друк('Лічильник: ' + лічильник);\n\n    лічильник--;\n  }\n}\n\nрахувати(3);"
		},
		{
			id: 9,
			name: 'Для',
			execute: 'for',
			example:
				"Для (Змінна i = 0; i < 5; i++) {\n  Друк('Крок ' + i);\n}",
			question:
				"Для (Змінна i = 0; i < 3; i++) {\n  Друк('Крок ' + i);\n}"
		},
		{
			id: 10,
			name: 'Зупинити',
			execute: 'break',
			example:
				"Для (Змінна i = 0; i < 5; i++) {\n  Якщо (i === 3) {\n    Зупинити;\n  }\n\n  Друк('i: ' + i);\n}",
			question:
				"Для (Змінна i = 0; i < 3; i++) {\n  Якщо (i === 3) {\n    Зупинити;\n  }\n\n  Друк('i: ' + i);\n}"
		},
		{
			id: 11,
			name: 'Пропустити',
			execute: 'continue',
			example:
				"Для (Змінна i = 0; i < 5; i++) {\n  Якщо (i === 2) {\n    Пропустити;\n  }\n\n  Друк('Крок: ' + i);\n}",
			question:
				"Для (Змінна i = 0; i < 3; i++) {\n  Якщо (i === 2) {\n    Пропустити;\n  }\n\n  Друк('Крок: ' + i);\n}"
		},
		{
			id: 12,
			name: 'Функція',
			execute: 'function',
			example:
				"Функція привітання(імя) {\n  Друк('Привіт, ' + імя + '!');\n}\n\nпривітання('Ніка');",
			question:
				"Функція привітання(імя) {\n  Друк('Привіт, ' + імя + '!');\n}\n\nпривітання('Іван');"
		},
		{
			id: 13,
			name: 'Попередження',
			execute: 'alert',
			example: "Попередження('Привіт, це повідомлення для тебе!');",
			question: "Попередження('Привіт, це повідомлення для тебе!');"
		},
		{
			id: 14,
			name: 'ВипадковеЧисло',
			execute: 'Math.random',
			example:
				"Змінна випадкове = ВипадковеЧисло();\n\nДрук('Випадкове число: ' + випадкове);",
			question:
				"Змінна випадкове = ВипадковеЧисло();\n\nДрук('Випадкове число: ' + випадкове);"
		},
		{
			id: 15,
			name: 'Округлити',
			execute: 'Math.round',
			example: "Друк('Округлити 4.6: ' + Округлити(4.6));",
			question: "Друк('Округлити 4.6: ' + Округлити(4.6));"
		},
		{
			id: 16,
			name: 'Підлога',
			execute: 'Math.floor',
			example: "Друк('Підлога 4.9: ' + Підлога(4.9));",
			question: "Друк('Підлога 4.9: ' + Підлога(4.9));"
		},
		{
			id: 17,
			name: 'Стеля',
			execute: 'Math.ceil',
			example: "Друк('Стеля 4.1: ' + Стеля(4.1));",
			question: "Друк('Стеля 4.1: ' + Стеля(4.1));"
		},
		{
			id: 18,
			name: 'Мінімум',
			execute: 'Math.min',
			example: "Друк('Мінімум з 3 і 8: ' + Мінімум(3, 8));",
			question: "Друк('Мінімум з 3 і 8: ' + Мінімум(3, 8));"
		},
		{
			id: 19,
			name: 'Максимум',
			execute: 'Math.max',
			example: "Друк('Максимум з 3 і 8: ' + Максимум(3, 8));",
			question: "Друк('Максимум з 3 і 8: ' + Максимум(3, 8));"
		},
		{
			id: 20,
			name: 'Корінь',
			execute: 'Math.sqrt',
			example: "Друк('Корінь з 25: ' + Корінь(25));",
			question: "Друк('Корінь з 23: ' + Корінь(25));"
		},
		{
			id: 21,
			name: 'Степінь',
			execute: 'Math.pow',
			example: "Друк('2 в степені 3: ' + Степінь(2, 3));",
			question: "Друк('2 в степені 3: ' + Степінь(2, 3));"
		},
		{
			id: 22,
			name: 'Дата',
			execute: 'new Date',
			example: "Друк('Сьогоднішня дата: ' + Дата());",
			question: "Друк('Сьогоднішня дата: ' + Дата());"
		},
		{
			id: 23,
			name: 'Зараз',
			execute: 'Date.now',
			example: "Друк('Час зараз: ' + Зараз());",
			question: "Друк('Час зараз: ' + Зараз());"
		},
		{
			id: 24,
			name: 'Довжина',
			execute: 'length',
			example:
				"Змінна текст = 'Привіт';\n\nДрук('Довжина: ' + текст.Довжина);",
			question:
				"Змінна текст = 'Привіт';\n\nДрук('Довжина: ' + текст.Довжина);"
		},
		{
			id: 25,
			name: 'Великими',
			execute: 'toUpperCase',
			example:
				"Змінна імя = 'Оля';\n\nДрук('Великими: ' + імя.Великими());",
			question:
				"Змінна імя = 'Іван';\n\nДрук('Великими: ' + імя.Великими());"
		},
		{
			id: 26,
			name: 'Малими',
			execute: 'toLowerCase',
			example: "Змінна імя = 'Оля';\n\nДрук('Малими: ' + імя.Малими());",
			question: "Змінна імя = 'Іван';\n\nДрук('Малими: ' + імя.Малими());"
		},
		{
			id: 27,
			name: 'ЦілеЧисло',
			execute: 'parseInt',
			example: "Друк('ЦілеЧисло: ' + ЦілеЧисло('42'));",
			question: "Друк('ЦілеЧисло: ' + ЦілеЧисло('21'));"
		},
		{
			id: 28,
			name: 'Число',
			execute: 'parseFloat',
			example: "Друк('Число: ' + Число('3.14'));",
			question: "Друк('Число: ' + Число('2.71'));"
		},
		{
			id: 29,
			name: 'Масив',
			execute: '[]',
			example:
				"Змінна список = Масив;\n\nДрук('Довжина Масива: ' + список.Довжина);",
			question:
				"Змінна список = Масив;\n\nДрук('Довжина Масива: ' + список.Довжина);"
		},
		{
			id: 30,
			name: 'Додати',
			execute: 'push',
			example:
				"Змінна список = Масив;\n\nсписок.Додати('яблуко');\n\nсписок.Додати('банан');\n\nДрук('Масив: ' + список);\n\nДрук('Після видалення: ' + список);\n\nДрук('Довжина Масива: ' + список.Довжина);",
			question:
				"Змінна список = Масив;\n\nсписок.Додати('груша');\n\nсписок.Додати('банан');\n\nДрук('Масив: ' + список);\n\nДрук('Після видалення: ' + список);\n\nДрук('Довжина Масива: ' + список.Довжина);"
		},
		{
			id: 31,
			name: 'ВидалитиОстанній',
			execute: 'pop',
			example:
				"Змінна список = Масив;\n\nсписок.Додати('яблуко');\n\nсписок.Додати('банан');\n\nДрук('Масив: ' + список);\n\nсписок.ВидалитиОстанній();\n\nДрук('Після видалення: ' + список.Довжина);\n\nДрук('Довжина Масива: ' + список.Довжина);",
			question:
				"Змінна список = Масив;\n\nсписок.Додати('груша');\n\nсписок.Додати('банан');\n\nДрук('Масив: ' + список);\n\nсписок.ВидалитиОстанній();\n\nДрук('Після видалення: ' + список.Довжина);\n\nДрук('Довжина Масива: ' + список.Довжина);"
		},
		{
			id: 32,
			name: 'Обєкт',
			execute: '{}',
			example:
				"Змінна учень = Обєкт;\n\nучень.імя = 'Оля';\n\nучень.вік = 10;\n\nДрук('Обєкт: ' + учень);",
			question:
				"Змінна учень = Обєкт;\n\nучень.імя = 'Іван';\n\nучень.вік = 10;\n\nДрук('Обєкт: ' + учень);"
		},
		{
			id: 33,
			name: 'Ключі',
			execute: 'Object.keys',
			example:
				"Змінна учень = Обєкт;\n\nучень.імя = 'Оля';\n\nучень.вік = 10;\n\nДрук('Ключі: ' + Ключі(учень));;",
			question:
				"Змінна учень = Обєкт;\n\nучень.імя = 'Іван';\n\nучень.вік = 10;\n\nДрук('Ключі: ' + Ключі(учень));;"
		},
		{
			id: 34,
			name: 'Значення',
			execute: 'Object.values',
			example:
				"Змінна учень = Обєкт;\n\nучень.імя = 'Оля';\n\nучень.вік = 10;\n\nДрук('Значення: ' + Значення(учень));",
			question:
				"Змінна учень = Обєкт;\n\nучень.імя = 'Іван';\n\nучень.вік = 10;\n\nДрук('Значення: ' + Значення(учень));"
		},
		{
			id: 35,
			name: 'Пари',
			execute: 'Object.entries',
			example:
				"Змінна учень = Обєкт;\n\nучень.імя = 'Оля';\n\nучень.вік = 10;\n\nДрук('Пари: ' + Пари(учень));",
			question:
				"Змінна учень = Обєкт;\n\nучень.імя = 'Іван';\n\nучень.вік = 10;\n\nДрук('Пари: ' + Пари(учень));"
		},
		{
			id: 36,
			name: 'ЄКлюч',
			execute: 'in',
			example:
				"Змінна дані = Обєкт;\n\nдані.місто = 'Київ';\n\nЯкщо ('місто' ЄКлюч дані) {\n  Друк('Місто знайдено: ' + дані.місто);\n}\n\nДрук('Після видалення: ' + дані);",
			question:
				"Змінна дані = Обєкт;\n\nдані.місто = 'Львів';\n\nЯкщо ('місто' ЄКлюч дані) {\n  Друк('Місто знайдено: ' + дані.місто);\n}\n\nДрук('Після видалення: ' + дані);"
		},
		{
			id: 37,
			name: 'Видалити',
			execute: 'delete',
			example:
				"Змінна дані = Обєкт;\n\nдані.місто = 'Київ';\n\nВидалити дані.місто;\n\nДрук('Після видалення: ' + дані);",
			question:
				"Змінна дані = Обєкт;\n\nдані.місто = 'Львів';\n\nВидалити дані.місто;\n\nДрук('Після видалення: ' + дані);"
		}
	];
}
